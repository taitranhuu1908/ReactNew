{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\Desktop\\\\ReactNew\\\\src\\\\Components\\\\AdminPage\\\\Admin\\\\Home\\\\Tasks\\\\TaskUsers\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport moment from \"moment\";\nimport { Table, TableHead, TableBody, TableRow, TableCell, Typography, Box, Stack, Pagination } from \"@material-ui/core\";\nimport * as actions from \"./../../../../../../Actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TaskUsers() {\n  _s();\n\n  const users = useSelector(state => state.users);\n  const dispatch = useDispatch();\n  const now = new moment();\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage, setPostsPerPage] = useState(5);\n\n  const checkUsers = users => {\n    var result = null;\n    var count = 0;\n    users.map((user, index) => {\n      if (moment(user.date).fromNow().indexOf(\"hours ago\") !== -1) {\n        count++;\n      }\n    });\n    count === 0 ? result = false : result = true;\n    return result;\n  };\n\n  useEffect(() => {\n    dispatch(actions.acGetUsersRequest());\n  }, []);\n  var pageNumber = 0;\n\n  for (let i = 1; i <= Math.ceil(users.length / postsPerPage); i++) {\n    pageNumber++;\n  }\n\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = users.slice(indexOfFirstPost, indexOfLastPost);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        minHeight: \"400px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: checkUsers(users) ? users.map((user, index) => {\n            if (moment(user.date).fromNow().indexOf(\"hours ago\") !== -1) {\n              return /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: user.id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 69,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: user.email\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: user.username\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: user.date\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 21\n              }, this);\n            }\n          }) : /*#__PURE__*/_jsxDEV(TableRow, {\n            children: /*#__PURE__*/_jsxDEV(TableCell, {\n              colSpan: 4,\n              children: \"No users have registered within the last 24 hours\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        padding: \"10px 0\",\n        display: \"flex\",\n        justifyContent: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 2,\n        children: /*#__PURE__*/_jsxDEV(Pagination, {\n          count: pageNumber,\n          onClick: e => setCurrentPage(e.target.innerText),\n          hidePrevButton: true,\n          hideNextButton: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TaskUsers, \"+MOkkcuHKZmyi6tgXN/BFbTp8xs=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = TaskUsers;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskUsers\");","map":{"version":3,"sources":["C:/Users/ADMIN/Desktop/ReactNew/src/Components/AdminPage/Admin/Home/Tasks/TaskUsers/index.js"],"names":["React","useEffect","useState","useDispatch","useSelector","moment","Table","TableHead","TableBody","TableRow","TableCell","Typography","Box","Stack","Pagination","actions","TaskUsers","users","state","dispatch","now","currentPage","setCurrentPage","postsPerPage","setPostsPerPage","checkUsers","result","count","map","user","index","date","fromNow","indexOf","acGetUsersRequest","pageNumber","i","Math","ceil","length","indexOfLastPost","indexOfFirstPost","currentPosts","slice","minHeight","id","email","username","padding","display","justifyContent","e","target","innerText"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport {\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Typography,\r\n  Box,\r\n  Stack,\r\n  Pagination,\r\n} from \"@material-ui/core\";\r\nimport * as actions from \"./../../../../../../Actions\";\r\n\r\nexport default function TaskUsers() {\r\n  const users = useSelector((state) => state.users);\r\n  const dispatch = useDispatch();\r\n  const now = new moment();\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [postsPerPage, setPostsPerPage] = useState(5);\r\n\r\n  const checkUsers = (users) => {\r\n    var result = null;\r\n    var count = 0;\r\n\r\n    users.map((user, index) => {\r\n      if (moment(user.date).fromNow().indexOf(\"hours ago\") !== -1) {\r\n        count++;\r\n      }\r\n    });\r\n\r\n    count === 0 ? (result = false) : (result = true);\r\n    return result;\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(actions.acGetUsersRequest());\r\n  }, []);\r\n\r\n  var pageNumber = 0;\r\n  for (let i = 1; i <= Math.ceil(users.length / postsPerPage); i++) {\r\n    pageNumber++;\r\n  }\r\n\r\n  const indexOfLastPost = currentPage * postsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n  const currentPosts = users.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n  return (\r\n    <Box>\r\n      <Box sx={{ minHeight: \"400px\" }}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>ID</TableCell>\r\n              <TableCell>Email</TableCell>\r\n              <TableCell>Username</TableCell>\r\n              <TableCell>Date</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {checkUsers(users) ? (\r\n              users.map((user, index) => {\r\n                if (moment(user.date).fromNow().indexOf(\"hours ago\") !== -1) {\r\n                  return (\r\n                    <TableRow key={index}>\r\n                      <TableCell>{user.id}</TableCell>\r\n                      <TableCell>{user.email}</TableCell>\r\n                      <TableCell>{user.username}</TableCell>\r\n                      <TableCell>{user.date}</TableCell>\r\n                    </TableRow>\r\n                  );\r\n                }\r\n              })\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell colSpan={4}>\r\n                  No users have registered within the last 24 hours\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </Box>\r\n      <Box\r\n        sx={{ padding: \"10px 0\", display: \"flex\", justifyContent: \"center\" }}\r\n      >\r\n        <Stack spacing={2}>\r\n          <Pagination\r\n            count={pageNumber}\r\n            onClick={(e) => setCurrentPage(e.target.innerText)}\r\n            hidePrevButton\r\n            hideNextButton\r\n          />\r\n        </Stack>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}