{"ast":null,"code":"import { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\";\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\n/**\r\n * Returns a number whose value is limited to the given range.\r\n * @param {number} value The value to be clamped\r\n * @param {number} min The lower boundary of the output range\r\n * @param {number} max The upper boundary of the output range\r\n * @returns {number} A number in the range [min, max]\r\n */\n\nfunction clamp(value) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(\"Material-UI: The value provided \".concat(value, \" is out of range [\").concat(min, \", \").concat(max, \"].\"));\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n/**\r\n * Converts a color from CSS hex format to CSS rgb format.\r\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\r\n * @returns {string} A CSS rgb color string\r\n */\n\n\nexport function hexToRgb(color) {\n  color = color.substr(1);\n  var re = new RegExp(\".{1,\".concat(color.length >= 6 ? 2 : 1, \"}\"), 'g');\n  var colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(function (n) {\n      return n + n;\n    });\n  }\n\n  return colors ? \"rgb\".concat(colors.length === 4 ? 'a' : '', \"(\").concat(colors.map(function (n, index) {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', '), \")\") : '';\n}\n\nfunction intToHex(int) {\n  var hex = int.toString(16);\n  return hex.length === 1 ? \"0\".concat(hex) : hex;\n}\n/**\r\n * Converts a color from CSS rgb format to CSS hex format.\r\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\r\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\r\n */\n\n\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  var _decomposeColor = decomposeColor(color),\n      values = _decomposeColor.values;\n\n  return \"#\".concat(values.map(function (n, i) {\n    return intToHex(i === 3 ? Math.round(255 * n) : n);\n  }).join(''));\n}\n/**\r\n * Converts a color from hsl format to rgb format.\r\n * @param {string} color - HSL color values\r\n * @returns {string} rgb color values\r\n */\n\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  var _color = color,\n      values = _color.values;\n  var h = values[0];\n  var s = values[1] / 100;\n  var l = values[2] / 100;\n  var a = s * Math.min(l, 1 - l);\n\n  var f = function f(n) {\n    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n\n  var type = 'rgb';\n  var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type: type,\n    values: rgb\n  });\n}\n/**\r\n * Returns an object with the type and values of a color.\r\n *\r\n * Note: Does not support rgb % values.\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @returns {object} - A MUI color object: {type: string, values: number[]}\r\n */\n\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: Unsupported `\".concat(color, \"` color.\\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().\") : _formatMuiErrorMessage(9, color));\n  }\n\n  var values = color.substring(marker + 1, color.length - 1);\n  var colorSpace;\n\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].substr(1);\n    }\n\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: unsupported `\".concat(colorSpace, \"` color space.\\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.\") : _formatMuiErrorMessage(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n\n  values = values.map(function (value) {\n    return parseFloat(value);\n  });\n  return {\n    type: type,\n    values: values,\n    colorSpace: colorSpace\n  };\n}\n/**\r\n * Converts a color object with type and values to a string.\r\n * @param {object} color - Decomposed color\r\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\r\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\r\n * @returns {string} A CSS color string\r\n */\n\nexport function recomposeColor(color) {\n  var type = color.type,\n      colorSpace = color.colorSpace;\n  var values = color.values;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map(function (n, i) {\n      return i < 3 ? parseInt(n, 10) : n;\n    });\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = \"\".concat(values[1], \"%\");\n    values[2] = \"\".concat(values[2], \"%\");\n  }\n\n  if (type.indexOf('color') !== -1) {\n    values = \"\".concat(colorSpace, \" \").concat(values.join(' '));\n  } else {\n    values = \"\".concat(values.join(', '));\n  }\n\n  return \"\".concat(type, \"(\").concat(values, \")\");\n}\n/**\r\n * Calculates the contrast ratio between two colors.\r\n *\r\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\r\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @returns {number} A contrast ratio value in the range 0 - 21.\r\n */\n\nexport function getContrastRatio(foreground, background) {\n  var lumA = getLuminance(foreground);\n  var lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\r\n * The relative brightness of any point in a color space,\r\n * normalized to 0 for darkest black and 1 for lightest white.\r\n *\r\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\r\n * @returns {number} The relative brightness of the color in the range 0 - 1\r\n */\n\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n  var rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(function (val) {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n\n    return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n/**\r\n * Darken or lighten a color, depending on its luminance.\r\n * Light colors are darkened, dark colors are lightened.\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\r\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\n\nexport function emphasize(color) {\n  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n/**\r\n * Sets the absolute transparency of a color.\r\n * Any existing alpha values are overwritten.\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\r\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\n\nexport function alpha(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  if (color.type === 'color') {\n    color.values[3] = \"/\".concat(value);\n  } else {\n    color.values[3] = value;\n  }\n\n  return recomposeColor(color);\n}\n/**\r\n * Darkens a color.\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\r\n * @param {number} coefficient - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\n\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\r\n * Lightens a color.\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\r\n * @param {number} coefficient - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\n\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.indexOf('color') !== -1) {\n    for (var _i = 0; _i < 3; _i += 1) {\n      color.values[_i] += (1 - color.values[_i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}","map":{"version":3,"sources":["C:/Users/emlac/Desktop/ReactNew/node_modules/@material-ui/system/esm/colorManipulator.js"],"names":["formatMuiErrorMessage","_formatMuiErrorMessage","clamp","value","min","max","process","env","NODE_ENV","console","error","Math","hexToRgb","color","substr","re","RegExp","length","colors","match","map","n","index","parseInt","round","join","intToHex","int","hex","toString","rgbToHex","indexOf","decomposeColor","values","i","hslToRgb","h","s","l","a","f","k","type","rgb","push","recomposeColor","charAt","marker","substring","Error","colorSpace","split","shift","parseFloat","getContrastRatio","foreground","background","lumA","getLuminance","lumB","val","Number","toFixed","emphasize","coefficient","darken","lighten","alpha"],"mappings":"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","sourcesContent":["import { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\";\r\n\r\n/* eslint-disable @typescript-eslint/no-use-before-define */\r\n\r\n/**\r\n * Returns a number whose value is limited to the given range.\r\n * @param {number} value The value to be clamped\r\n * @param {number} min The lower boundary of the output range\r\n * @param {number} max The upper boundary of the output range\r\n * @returns {number} A number in the range [min, max]\r\n */\r\nfunction clamp(value, min = 0, max = 1) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (value < min || value > max) {\r\n      console.error(`Material-UI: The value provided ${value} is out of range [${min}, ${max}].`);\r\n    }\r\n  }\r\n\r\n  return Math.min(Math.max(min, value), max);\r\n}\r\n/**\r\n * Converts a color from CSS hex format to CSS rgb format.\r\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\r\n * @returns {string} A CSS rgb color string\r\n */\r\n\r\n\r\nexport function hexToRgb(color) {\r\n  color = color.substr(1);\r\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\r\n  let colors = color.match(re);\r\n\r\n  if (colors && colors[0].length === 1) {\r\n    colors = colors.map(n => n + n);\r\n  }\r\n\r\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\r\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\r\n  }).join(', ')})` : '';\r\n}\r\n\r\nfunction intToHex(int) {\r\n  const hex = int.toString(16);\r\n  return hex.length === 1 ? `0${hex}` : hex;\r\n}\r\n/**\r\n * Converts a color from CSS rgb format to CSS hex format.\r\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\r\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\r\n */\r\n\r\n\r\nexport function rgbToHex(color) {\r\n  // Idempotent\r\n  if (color.indexOf('#') === 0) {\r\n    return color;\r\n  }\r\n\r\n  const {\r\n    values\r\n  } = decomposeColor(color);\r\n  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;\r\n}\r\n/**\r\n * Converts a color from hsl format to rgb format.\r\n * @param {string} color - HSL color values\r\n * @returns {string} rgb color values\r\n */\r\n\r\nexport function hslToRgb(color) {\r\n  color = decomposeColor(color);\r\n  const {\r\n    values\r\n  } = color;\r\n  const h = values[0];\r\n  const s = values[1] / 100;\r\n  const l = values[2] / 100;\r\n  const a = s * Math.min(l, 1 - l);\r\n\r\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\r\n\r\n  let type = 'rgb';\r\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\r\n\r\n  if (color.type === 'hsla') {\r\n    type += 'a';\r\n    rgb.push(values[3]);\r\n  }\r\n\r\n  return recomposeColor({\r\n    type,\r\n    values: rgb\r\n  });\r\n}\r\n/**\r\n * Returns an object with the type and values of a color.\r\n *\r\n * Note: Does not support rgb % values.\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @returns {object} - A MUI color object: {type: string, values: number[]}\r\n */\r\n\r\nexport function decomposeColor(color) {\r\n  // Idempotent\r\n  if (color.type) {\r\n    return color;\r\n  }\r\n\r\n  if (color.charAt(0) === '#') {\r\n    return decomposeColor(hexToRgb(color));\r\n  }\r\n\r\n  const marker = color.indexOf('(');\r\n  const type = color.substring(0, marker);\r\n\r\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\r\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `Material-UI: Unsupported \\`${color}\\` color.\r\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : _formatMuiErrorMessage(9, color));\r\n  }\r\n\r\n  let values = color.substring(marker + 1, color.length - 1);\r\n  let colorSpace;\r\n\r\n  if (type === 'color') {\r\n    values = values.split(' ');\r\n    colorSpace = values.shift();\r\n\r\n    if (values.length === 4 && values[3].charAt(0) === '/') {\r\n      values[3] = values[3].substr(1);\r\n    }\r\n\r\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\r\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `Material-UI: unsupported \\`${colorSpace}\\` color space.\r\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : _formatMuiErrorMessage(10, colorSpace));\r\n    }\r\n  } else {\r\n    values = values.split(',');\r\n  }\r\n\r\n  values = values.map(value => parseFloat(value));\r\n  return {\r\n    type,\r\n    values,\r\n    colorSpace\r\n  };\r\n}\r\n/**\r\n * Converts a color object with type and values to a string.\r\n * @param {object} color - Decomposed color\r\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\r\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\r\n * @returns {string} A CSS color string\r\n */\r\n\r\nexport function recomposeColor(color) {\r\n  const {\r\n    type,\r\n    colorSpace\r\n  } = color;\r\n  let {\r\n    values\r\n  } = color;\r\n\r\n  if (type.indexOf('rgb') !== -1) {\r\n    // Only convert the first 3 values to int (i.e. not alpha)\r\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\r\n  } else if (type.indexOf('hsl') !== -1) {\r\n    values[1] = `${values[1]}%`;\r\n    values[2] = `${values[2]}%`;\r\n  }\r\n\r\n  if (type.indexOf('color') !== -1) {\r\n    values = `${colorSpace} ${values.join(' ')}`;\r\n  } else {\r\n    values = `${values.join(', ')}`;\r\n  }\r\n\r\n  return `${type}(${values})`;\r\n}\r\n/**\r\n * Calculates the contrast ratio between two colors.\r\n *\r\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\r\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @returns {number} A contrast ratio value in the range 0 - 21.\r\n */\r\n\r\nexport function getContrastRatio(foreground, background) {\r\n  const lumA = getLuminance(foreground);\r\n  const lumB = getLuminance(background);\r\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\r\n}\r\n/**\r\n * The relative brightness of any point in a color space,\r\n * normalized to 0 for darkest black and 1 for lightest white.\r\n *\r\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\r\n * @returns {number} The relative brightness of the color in the range 0 - 1\r\n */\r\n\r\nexport function getLuminance(color) {\r\n  color = decomposeColor(color);\r\n  let rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\r\n  rgb = rgb.map(val => {\r\n    if (color.type !== 'color') {\r\n      val /= 255; // normalized\r\n    }\r\n\r\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\r\n  }); // Truncate at 3 digits\r\n\r\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\r\n}\r\n/**\r\n * Darken or lighten a color, depending on its luminance.\r\n * Light colors are darkened, dark colors are lightened.\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\r\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\r\n\r\nexport function emphasize(color, coefficient = 0.15) {\r\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\r\n}\r\n/**\r\n * Sets the absolute transparency of a color.\r\n * Any existing alpha values are overwritten.\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\r\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\r\n\r\nexport function alpha(color, value) {\r\n  color = decomposeColor(color);\r\n  value = clamp(value);\r\n\r\n  if (color.type === 'rgb' || color.type === 'hsl') {\r\n    color.type += 'a';\r\n  }\r\n\r\n  if (color.type === 'color') {\r\n    color.values[3] = `/${value}`;\r\n  } else {\r\n    color.values[3] = value;\r\n  }\r\n\r\n  return recomposeColor(color);\r\n}\r\n/**\r\n * Darkens a color.\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\r\n * @param {number} coefficient - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\r\n\r\nexport function darken(color, coefficient) {\r\n  color = decomposeColor(color);\r\n  coefficient = clamp(coefficient);\r\n\r\n  if (color.type.indexOf('hsl') !== -1) {\r\n    color.values[2] *= 1 - coefficient;\r\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\r\n    for (let i = 0; i < 3; i += 1) {\r\n      color.values[i] *= 1 - coefficient;\r\n    }\r\n  }\r\n\r\n  return recomposeColor(color);\r\n}\r\n/**\r\n * Lightens a color.\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\r\n * @param {number} coefficient - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\r\n\r\nexport function lighten(color, coefficient) {\r\n  color = decomposeColor(color);\r\n  coefficient = clamp(coefficient);\r\n\r\n  if (color.type.indexOf('hsl') !== -1) {\r\n    color.values[2] += (100 - color.values[2]) * coefficient;\r\n  } else if (color.type.indexOf('rgb') !== -1) {\r\n    for (let i = 0; i < 3; i += 1) {\r\n      color.values[i] += (255 - color.values[i]) * coefficient;\r\n    }\r\n  } else if (color.type.indexOf('color') !== -1) {\r\n    for (let i = 0; i < 3; i += 1) {\r\n      color.values[i] += (1 - color.values[i]) * coefficient;\r\n    }\r\n  }\r\n\r\n  return recomposeColor(color);\r\n}"]},"metadata":{},"sourceType":"module"}