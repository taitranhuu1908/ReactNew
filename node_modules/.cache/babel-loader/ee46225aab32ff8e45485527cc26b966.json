{"ast":null,"code":"import * as types from \"./../Constant/ActionTypes\";\nlet initialState = [];\n\nvar findIndex = (products, id) => {\n  var result = -1;\n  products.forEach((product, index) => {\n    if (product.id === id) {\n      result = index;\n      return result;\n    }\n  });\n  return result;\n};\n\nconst works = (state = initialState, action) => {\n  var index = -1;\n\n  switch (action.type) {\n    case types.GET_WORK:\n      state = [...action.works];\n      return [...state];\n\n    case types.ADD_WORK:\n      state.push(action.work);\n      return [...state];\n\n    case types.DELETE_WORK:\n      index = findIndex(state, action.id);\n\n      if (index !== -1) {\n        state.splice(index, 1);\n      }\n\n      return [...state];\n\n    default:\n      return [...state];\n  }\n};\n\nexport default works;","map":{"version":3,"sources":["C:/Users/MT COM/Desktop/ReactNew/ReactJS/src/Reducers/works.js"],"names":["types","initialState","findIndex","products","id","result","forEach","product","index","works","state","action","type","GET_WORK","ADD_WORK","push","work","DELETE_WORK","splice"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,2BAAvB;AAEA,IAAIC,YAAY,GAAG,EAAnB;;AAEA,IAAIC,SAAS,GAAG,CAACC,QAAD,EAAWC,EAAX,KAAkB;AAChC,MAAIC,MAAM,GAAG,CAAC,CAAd;AACAF,EAAAA,QAAQ,CAACG,OAAT,CAAiB,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACnC,QAAID,OAAO,CAACH,EAAR,KAAeA,EAAnB,EAAuB;AACrBC,MAAAA,MAAM,GAAGG,KAAT;AACA,aAAOH,MAAP;AACD;AACF,GALD;AAMA,SAAOA,MAAP;AACD,CATD;;AAWA,MAAMI,KAAK,GAAG,CAACC,KAAK,GAAGT,YAAT,EAAuBU,MAAvB,KAAkC;AAC9C,MAAIH,KAAK,GAAG,CAAC,CAAb;;AACA,UAAQG,MAAM,CAACC,IAAf;AACE,SAAKZ,KAAK,CAACa,QAAX;AACEH,MAAAA,KAAK,GAAG,CAAC,GAAGC,MAAM,CAACF,KAAX,CAAR;AACA,aAAO,CAAC,GAAGC,KAAJ,CAAP;;AACF,SAAKV,KAAK,CAACc,QAAX;AACEJ,MAAAA,KAAK,CAACK,IAAN,CAAWJ,MAAM,CAACK,IAAlB;AACA,aAAO,CAAC,GAAGN,KAAJ,CAAP;;AACF,SAAKV,KAAK,CAACiB,WAAX;AACET,MAAAA,KAAK,GAAGN,SAAS,CAACQ,KAAD,EAAQC,MAAM,CAACP,EAAf,CAAjB;;AACA,UAAII,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBE,QAAAA,KAAK,CAACQ,MAAN,CAAaV,KAAb,EAAoB,CAApB;AACD;;AACD,aAAO,CAAC,GAAGE,KAAJ,CAAP;;AACF;AACE,aAAO,CAAC,GAAGA,KAAJ,CAAP;AAdJ;AAgBD,CAlBD;;AAoBA,eAAeD,KAAf","sourcesContent":["import * as types from \"./../Constant/ActionTypes\";\r\n\r\nlet initialState = [];\r\n\r\nvar findIndex = (products, id) => {\r\n  var result = -1;\r\n  products.forEach((product, index) => {\r\n    if (product.id === id) {\r\n      result = index;\r\n      return result;\r\n    }\r\n  });\r\n  return result;\r\n};\r\n\r\nconst works = (state = initialState, action) => {\r\n  var index = -1;\r\n  switch (action.type) {\r\n    case types.GET_WORK:\r\n      state = [...action.works];\r\n      return [...state];\r\n    case types.ADD_WORK:\r\n      state.push(action.work);\r\n      return [...state];\r\n    case types.DELETE_WORK:\r\n      index = findIndex(state, action.id);\r\n      if (index !== -1) {\r\n        state.splice(index, 1);\r\n      }\r\n      return [...state];\r\n    default:\r\n      return [...state];\r\n  }\r\n};\r\n\r\nexport default works;\r\n"]},"metadata":{},"sourceType":"module"}